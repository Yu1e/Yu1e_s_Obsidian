```dataviewjs
const terms = new Set();
const pages = dv.pages().array();
let isPaused = false;
let columnCount = 4;

async function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

const container = dv.container;
const progressBar = container.createEl("progress", { attr: { max: pages.length, value: 0 }});
const statusText = container.createEl("p");

const buttonDiv = container.createEl("div");
const pauseBtn = buttonDiv.createEl("button", { text: "‚è∏Ô∏è –ü–∞—É–∑–∞" });

pauseBtn.onclick = () => {
  isPaused = !isPaused;
  pauseBtn.innerText = isPaused ? "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" : "‚è∏Ô∏è –ü–∞—É–∑–∞";
};

for (let i = 0; i < pages.length; i++) {
  while (isPaused) {
    await delay(100);
  }
  
  const text = await dv.io.load(pages[i].file.path);
  if (text) {
    const matches = text.matchAll(/==(.+?)==/g);
    for (const m of matches) {
      const term = m[1].trim();
      if (/^[–∞-—è–ê-–Ø—ë–Åa-zA-Z]/.test(term) && 
          !term.includes('*') && 
          !term.includes('`') && 
          !term.includes('[[') &&
          !term.includes('(') &&
          !term.includes('+') &&
          !/\b(Ctrl|Shift|Alt|Win|Tab|Enter|Del|F\d+|End|Home)\b/i.test(term)) {
        terms.add(term);
      }
    }
  }
  
  progressBar.value = i + 1;
  statusText.innerText = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–º–µ—Ç–æ–∫: ${i+1}/${pages.length} —Ñ–∞–π–ª–æ–≤ | –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–¥–Ω–µ–π: ${terms.size}`;
  await delay(1);
}

const sorted = [...terms].sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase(), 'ru'));

const grouped = {};
for (const term of sorted) {
  const firstLetter = term[0].toUpperCase();
  if (!grouped[firstLetter]) {
    grouped[firstLetter] = [];
  }
  grouped[firstLetter].push(term);
}

pauseBtn.remove();

const sliderDiv = container.createEl("div");
sliderDiv.createEl("span", { text: "–°—Ç–æ–ª–±—Ü–æ–≤: " });

const sliderValue = sliderDiv.createEl("span", { text: "4" });
sliderValue.style.fontWeight = "bold";
sliderValue.style.marginLeft = "10px";

sliderDiv.createEl("br");

const slider = sliderDiv.createEl("input", { 
  type: "range",
  attr: { min: "1", max: "10", value: "4" }
});
slider.style.width = "200px";
slider.style.marginTop = "5px";

slider.oninput = () => {
  columnCount = parseInt(slider.value);
  sliderValue.innerText = columnCount.toString();
};

container.createEl("br");

const buttonsDiv = container.createEl("div");

const saveBtn = buttonsDiv.createEl("button", { text: "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫—É" });
saveBtn.onclick = async () => {
  try {
    const letters = Object.keys(grouped).sort();
    
    // Frontmatter —Å –ø–ª–∞–≥–∏–Ω–æ–º force-view-mode-of-note (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —Å—Ä–∞–∑—É –≤ —Ä–µ–∂–∏–º–µ —á—Ç–µ–Ω–∏—è)
    let content = `---
obsidianUIMode: preview
---

`;
    
    // ============================================================================
    // –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –í –°–¢–û–õ–ë–¶–´ –° –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï–ú –ü–õ–ê–ì–ò–ù–ê "Horizontal blocks"
    // –ï—Å–ª–∏ –ø–ª–∞–≥–∏–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —ç—Ç–æ—Ç –±–ª–æ–∫ –∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ
    // ============================================================================
    
    const columns = Array(columnCount).fill(null).map(() => []);
    letters.forEach((letter, idx) => {
      columns[idx % columnCount].push(letter);
    });
    
    content += '```horizontal\n';
    
    for (let col = 0; col < columnCount; col++) {
      for (const letter of columns[col]) {
        content += `### ${letter}\n`;
        content += grouped[letter].map(term => `- ${term}`).join('\n');
        content += '\n\n';
      }
      if (col < columnCount - 1) content += '---\n';
    }
    
    content += '```';
    
    // ============================================================================
    // –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –°–¢–û–õ–ë–¶–ê–ú–ò (–ø–ª–∞–≥–∏–Ω Horizontal blocks)
    // ============================================================================
    
    /* –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –í–ê–†–ò–ê–ù–¢ –ë–ï–ó –ü–õ–ê–ì–ò–ù–ê (–ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –±—É–∫–≤–∞–º):
    for (const letter of letters) {
      content += `## ${letter}\n`;
      content += grouped[letter].map(term => `- ${term}`).join('\n');
      content += '\n\n';
    }
    */
    
    const folder = "–í–°–Å_–û–°–¢–ê–õ–¨–ù–û–ï/–°–ª–æ–≤–∞_–î–Ω–µ–π";
    const filepath = `${folder}/–í—Å–µ—Å–ª–æ–≤–∞—Ä—å_–≤—ã–≥—Ä—É–∑–∫–∞.md`;
    
    const folders = folder.split('/');
    let currentPath = '';
    for (const f of folders) {
      currentPath = currentPath ? `${currentPath}/${f}` : f;
      if (!app.vault.getAbstractFileByPath(currentPath)) {
        await app.vault.createFolder(currentPath);
      }
    }
    
    const existingFile = app.vault.getAbstractFileByPath(filepath);
    if (existingFile) {
      await app.vault.modify(existingFile, content);
    } else {
      await app.vault.create(filepath, content);
    }
    
    saveBtn.innerText = "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ";
    
    const openBtn = buttonsDiv.createEl("button", { text: "üìÇ –û—Ç–∫—Ä—ã—Ç—å" });
    openBtn.style.marginLeft = "10px";
    openBtn.onclick = () => {
      app.workspace.openLinkText(filepath, '', false);
    };
    
  } catch(e) {
    saveBtn.innerText = "‚ùå –û—à–∏–±–∫–∞!";
    console.log(e);
  }
};

container.createEl("br");

// –ü–æ–∏—Å–∫
const searchDiv = container.createEl("div");
const searchInput = searchDiv.createEl("input", { 
  type: "text", 
  placeholder: "üîç –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–¥–Ω—è–º..." 
});
searchInput.style.width = "300px";
searchInput.style.marginBottom = "10px";

const resultDiv = container.createEl("div");

function displayTerms(filter = "") {
  resultDiv.empty();
  const filtered = filter 
    ? sorted.filter(t => t.toLowerCase().includes(filter.toLowerCase()))
    : sorted;
  
  if (filtered.length > 0) {
    const text = filtered.join("\n");
    resultDiv.createEl("pre").innerText = text;
  } else {
    resultDiv.createEl("p").innerText = "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";
  }
}

searchInput.oninput = () => displayTerms(searchInput.value);

statusText.innerText = `‚úÖ –ì–æ—Ç–æ–≤–æ! –í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ${terms.size} —Å–ª–æ–≤–¥–Ω–µ–π`;

displayTerms();
```
